---
description: Guidelines for implementing Next.js API routes
globs: 
alwaysApply: false
---
# API Routes

## Standard Format
Use this format for API routes:

```ts
import { z } from "zod";
import { NextResponse } from "next/server";
import { auth } from "@/app/api/auth/[...nextauth]/auth";
import prisma from "@/utils/prisma";
import { withError } from "@/utils/middleware";

const ApiNameBody = z.object({ id: z.string(), message: z.string() });
export type ApiNameBody = z.infer<typeof ApiNameBody>;
export type updateApiNameResponse = Awaited<ReturnType<typeof updateApiName>>;

async function updateApiName(body: ApiNameBody, options: { email: string }) {
  const { email } = options;
  const result = await prisma.table.update({
    where: {
      id: body.id,
      email,
    },
    data: body
  })

  return { result };
};

export const POST = withError(async (request: Request) => {
  const session = await auth();
  if (!session?.user.email) return NextResponse.json({ error: "Not authenticated" });

  const json = await request.json();
  const body = ApiNameBody.parse(json);

  const result = await updateApiName(body, { email: session.user.email });

  return NextResponse.json(result);
});
```

## Implementation Guidelines
- Use Zod for request body validation
- Create separate functions for business logic
- Wrap route handlers with `withError` middleware
- Always validate authentication with `auth()`
- Export typed responses for client usage 