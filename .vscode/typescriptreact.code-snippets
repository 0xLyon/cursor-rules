{
  // based on: https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/blob/main/.vscode/typescriptreact.code-snippets
  //#region  //*=========== React ===========
  "React.useState": {
    "prefix": "us",
    "body": [
      "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = React.useState<$3>(${2:initial${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}})$0"
    ]
  },
  "React.useEffect": {
    "prefix": "uf",
    "body": ["React.useEffect(() => {", "  $0", "}, []);"]
  },
  "React Functional Component": {
    "prefix": "rc",
    "body": [
      "export function ${1:${TM_FILENAME_BASE}}(props: {}) {",
      "  return (",
      "    <div>",
      "      $0",
      "    </div>",
      "  )",
      "}"
    ]
  },
  //#endregion  //*======== React ===========

  //#region  //*=========== Commons ===========
  "Region": {
    "prefix": "reg",
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "body": [
      "//#region  //*=========== ${1} ===========",
      "${TM_SELECTED_TEXT}$0",
      "//#endregion  //*======== ${1} ==========="
    ]
  },
  "Region CSS": {
    "prefix": "regc",
    "scope": "css, scss",
    "body": [
      "/* #region  /**=========== ${1} =========== */",
      "${TM_SELECTED_TEXT}$0",
      "/* #endregion  /**======== ${1} =========== */"
    ]
  },
  //#endregion  //*======== Commons ===========

  //#region  //*=========== Nextjs ===========
  "Next Pages": {
    "prefix": "np",
    "body": [
      "import type { NextPage } from 'next';",
      "import { useRouter } from 'next/router';",
      "import { Container } from '@components/Container';",
      "import { CreatorLayout } from '@layouts/CreatorLayout';",
      "",
      "const ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}: NextPage = () => {",
      "  const router = useRouter();",
      "  const slug = router.query.slug as string;",
      "",
      "  return (",
      "    <CreatorLayout userType=\"creator\" fullWidth slug={slug} selected={'${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}'}>",
      "      <Container size=\"lg\">Page</Container>",
      "    </CreatorLayout>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}};"
    ],
    "description": "Next Pages"
  },
  "Next API": {
    "prefix": "napi",
    "body": [
      "import type { NextApiRequest, NextApiResponse } from 'next';",
      "import { z } from 'zod';",
      "import prisma from '@utils/prisma';",
      "import { ErrorMessage, notLoggedInError } from '@utils/error';",
      "import { withDefaultMiddleware } from '@utils/middleware';",
      "",
      "const projectQuery = z.object({ slug: z.string() });",
      "export type ProjectQuery = z.infer<typeof projectQuery>;",
      "export type ProjectResponse = Awaited<ReturnType<typeof getProjects>>;",
      "",
      "async function getProjects(options: ProjectQuery) {",
      "  const { slug } = options;",
      "  const projects = await prisma.project.findUnique({ where: { slug } });",
      "  return projects;",
      "}",
      "",
      "async function handler(",
      "  req: NextApiRequest,",
      "  res: NextApiResponse<ProjectResponse | null | ErrorMessage>",
      ") {",
      "  const address = req.session?.siwe?.address;",
      "  if (!address) return notLoggedInError(res);",
      "",
      "  const query = projectQuery.parse(req.query);",
      "",
      "  const project = await getProjects(query);",
      "",
      "  return res.status(200).json(project);",
      "}",
      "",
      "export default withDefaultMiddleware('GET', handler);",
      ""
    ],
    "description": "Next API"
  },
  "Next API Post": {
    "prefix": "napip",
    "body": [
      "import { NextApiRequest, NextApiResponse } from 'next';",
      "import { z } from 'zod';",
      "import prisma from '@utils/prisma';",
      "import { ErrorMessage, notLoggedInError } from '@utils/error';",
      "import { withDefaultMiddleware } from '@utils/middleware';",
      "",
      "const ${3:${TM_FILENAME_BASE}}Body = z.object({ slug: z.string() });",
      "export type ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Body = z.infer<typeof ${3:${TM_FILENAME_BASE}}Body>;",
      "export type ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Response = Awaited<ReturnType<typeof updateProject>>;",
      "",
      "async function updateProject(options: ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Body) {",
      "  const { slug } = options;",
      "  const project = await prisma.project.update({ where: { slug }, data: {} });",
      "  return project;",
      "}",
      "",
      "async function handler(",
      "  req: NextApiRequest,",
      "  res: NextApiResponse<${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Response | ErrorMessage>",
      ") {",
      "  const body = ${3:${TM_FILENAME_BASE}}Body.parse(req.body);",
      "",
      "  const address = req.session?.siwe?.address;",
      "  if (!address) return notLoggedInError(res);",
      "",
      "  const project = await updateProject(body);",
      "  return res.status(200).json(project);",
      "}",
      "",
      "export default withDefaultMiddleware('POST', handler);",
      ""
    ],
    "description": "Next API Post"
  },
  //#endregion  //*======== Nextjs ===========

  //#region  //*=========== Snippet Wrap ===========
  "Wrap with Fragment": {
    "prefix": "ff",
    "body": ["<>", "\t${TM_SELECTED_TEXT}", "</>"]
  },
  "Wrap with clsx": {
    "prefix": "cx",
    "body": ["{clsx(${TM_SELECTED_TEXT}$0)}"]
  },
  //#endregion  //*======== Snippet Wrap ===========

  //#region  //*=========== Custom ===========
  "React Hook Form": {
    "prefix": "rhf",
    "body": [
      "import { useCallback } from 'react';",
      "import { SubmitHandler, useForm } from 'react-hook-form';",
      "import { Button } from '@components/Button';",
      "import { Input } from '@components/Input';",
      "import { useNotification } from '@providers/NotificationProvider';",
      "import { isErrorMessage } from '@utils/error';",
      "",
      "type Inputs = { address: string };",
      "",
      "const ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Form = () => {",
      "  const { register, handleSubmit, formState: { errors, isSubmitting } } = useForm<Inputs>();",
      "  const { showNotification } = useNotification();",
      "",
      "  const onSubmit: SubmitHandler<Inputs> = useCallback(",
      "    async data => {",
      "      const res = await updateProfile(data)",
      "      if (isErrorMessage(res)) showNotification({ type: 'error', description: `` });",
      "      else showNotification({ type: 'success', description: `` });",
      "    },",
      "    [showNotification]",
      "  );",
      "",
      "  return (",
      "    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">",
      "      <Input",
      "        type=\"text\"",
      "        name=\"address\"",
      "        label=\"Address\"",
      "        registerProps={register('address', { required: true })}",
      "        error={errors.code}",
      "      />",
      "      <Button type=\"submit\" color=\"gradient\" full loading={isSubmitting}>",
      "        Add",
      "      </Button>",
      "    </form>",
      "  );",
      "}"
    ]
  },
  "Use API Hook": {
    "prefix": "uah",
    "body": [
      "import useSWR from 'swr';",
      "import { BASE_URI } from '@utils/configPublic';",
      "import { $3Response } from '@pages/api/$2';",
      "import { ErrorMessage } from '@utils/error';",
      "",
      "export function ${1:${TM_FILENAME_BASE}}() {",
      "  const url = `\\${BASE_URI}/api/$2`;",
      "  const res = useSWR<$3Response, { info: ErrorMessage }>(url);",
      "  return res;",
      "}"
    ]
  },
  //#endregion  //*======== Custom ===========

  "Logger": {
    "prefix": "lg",
    "body": ["console.log({ ${1:${CLIPBOARD}} }, '${TM_FILENAME} line ${TM_LINE_NUMBER}')"]
  },
  "Simple Logger": {
    "prefix": "cl",
    "body": ["console.log('$1')"]
  },
  "Error Logger": {
    "prefix": "ce",
    "body": ["console.error('$1')"]
  },
  "Use Client": {
    "prefix": "uc",
    "body": ["'use client';\n"]
  }
}
